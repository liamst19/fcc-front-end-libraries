{"version":3,"sources":["services/quotes.js","components/QuoteBox.jsx","App.js","index.js"],"names":["QUOTES","id","author","text","getQuote","i","randomIndex","min","max","Math","ceil","floor","random","getRandomQuote","quote","last","length","QuoteBox","props","useState","setQuote","useEffect","className","href","onClick","e","App","ReactDOM","render","document","getElementById"],"mappings":"yLAIMA,EAAS,CACb,CACEC,GAAI,EACJC,OAAQ,aACRC,KAAM,uGAER,CACEF,GAAI,EACJC,OAAQ,sBACRC,KAAM,sHAER,CACEF,GAAI,EACJC,OAAQ,sBACRC,KAAM,6QAER,CACEF,GAAI,EACJC,OAAQ,aACRC,KAAM,qCAER,CACEF,GAAI,EACJC,OAAQ,WACRC,KAAM,4CAER,CACEF,GAAI,EACJC,OAAQ,sBACRC,KAAM,wDAER,CACEF,GAAI,EACJC,OAAQ,iBACRC,KAAM,0BAER,CACEF,GAAI,EACJC,OAAQ,WACRC,KAAM,6DAER,CACEF,GAAI,EACJC,OAAQ,YACRC,KAAM,8EAER,CACEF,GAAI,EACJC,OAAQ,wBACRC,KAAM,kDAqBGC,EAAW,SAACC,GAAD,OAAQL,EAAOK,IAK1BC,EAAc,SAACC,EAAKC,GAG/B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,GAGpCM,EAzBQ,WAAgB,IACjCC,EADkBC,EAAc,wDAAN,EAI9B,GACED,EAAQV,EAASE,EAAY,EAAGN,EAAOgB,eACjCF,EAAMb,KAAOc,GAErB,OAAOD,GCpBMG,G,KA1CE,SAAAC,GAAU,IAAD,EAEIC,mBAAS,CACnChB,KAAM,GACND,OAAQ,KAJc,mBAEhBY,EAFgB,KAETM,EAFS,KAOxBC,qBAAU,WACRD,EAASP,OACR,IAMH,OAAQ,yBAAKZ,GAAG,YAAYqB,UAAU,aAC5B,yBAAKA,UAAU,aACb,yBAAKrB,GAAG,iBACN,yBAAKqB,UAAU,OACb,yBAAKA,UAAU,sBACb,uBAAGrB,GAAG,cACHsB,KAAI,iDAA4CT,EAAMX,KAAlD,eAA6DW,EAAMZ,SACpF,uBAAGoB,UAAU,oBAGL,yBAAKA,UAAU,kCACb,4BAAQrB,GAAG,YAAYqB,UAAU,kBAAkBE,QAfjD,SAAAC,GAClBL,EAASP,EAAeC,EAAMb,OAcd,gBAIN,6BACE,yBAAKA,GAAG,aAAaqB,UAAU,yBAC7B,uBAAGrB,GAAG,QAAQa,EAAMX,OAEtB,yBAAKF,GAAG,eAAeqB,UAAU,cAC/B,0BAAMrB,GAAG,UAAT,UAA2Ba,EAAMZ,cC9BpCwB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.e80dc189.chunk.js","sourcesContent":["\n/* List of Quotes to be displayed\n *\n */\nconst QUOTES = [\n  {\n    id: 0,\n    author: 'Heraclitus',\n    text: 'The world of the waking is one and shared, but the sleeping turn aside each into his private world.'\n  },\n  {\n    id: 1,\n    author: 'Friedrich Nietzsche',\n    text: 'What does nihilism mean? That the highest values devaluate themselves. The aim is lacking; \"why?\" finds no answer.'\n  },\n  {\n    id: 2,\n    author: 'Ludwig Wittgenstein',\n    text: 'Our language can be regarded as an ancient city: a maze of little streets and squares, of old and new houses, of houses with extensions from various periods, and all this surrounded by a multitude of new suburbs with straight and regular streets and uniform houses.'\n  },\n  {\n    id: 3,\n    author: 'Protagoras',\n    text: 'Man is the measure of all things.'\n  },\n  {\n    id: 4,\n    author: 'Socrates',\n    text: 'The unexamined life is not worth living.'\n  },\n  {\n    id: 5,\n    author: 'Ludwig Wittgenstein',\n    text: 'Whereof one cannot speak, thereof one must be silent'\n  },\n  {\n    id: 6,\n    author: 'Rene Descartes',\n    text: 'I think therefore I am'\n  },\n  {\n    id: 7,\n    author: 'Voltaire',\n    text: 'If God did not exist, it would be necessary to invent Him'\n  },\n  {\n    id: 8,\n    author: 'Aristotle',\n    text: 'We are what we repeatedly do. Excellence, then, is not an act, but a habit'\n  },\n  {\n    id: 9,\n    author: 'Jean-Jacques Rousseau',\n    text: 'Man is born free, but is everywhere in chains'\n  },\n]\n\n/* getRandomQuote()\n * Fetches a random quote and author from list\n */\nconst getRandomQuote = (last = -1) => {\n  let quote;\n\n  // Making sure that the new quote is different\n  do {\n    quote = getQuote(randomIndex(0, QUOTES.length));\n  } while(quote.id === last);\n\n  return quote;\n}\n\n/* getQuote()\n * Fetches a quote from list with index\n */\nexport const getQuote = (i) =>  QUOTES[i];\n\n/* randomIndex\n * Get a random integer between min and max\n */\nexport const randomIndex = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default getRandomQuote\n","import React, { useState, useEffect } from 'react'\nimport getRandomQuote from '../services/quotes'\n\n// Stylesheet\nimport './QuoteBox.css'\n\nconst QuoteBox = props => {\n\n  const [ quote, setQuote ] = useState({\n    text: '',\n    author: ''\n  });\n\n  useEffect(() => {\n    setQuote(getRandomQuote())\n  }, []);\n\n  const handleClick = e => {\n    setQuote(getRandomQuote(quote.id));\n  }\n\n  return (<div id=\"quote-box\" className=\"jumbotron\">\n            <div className=\"container\">\n              <div id=\"quote-buttons\">\n                <div className=\"row\">\n                  <div className=\"col-md-6 text-left\">\n                    <a id=\"tweet-quote\"\n                       href={`https://twitter.com/intent/tweet?text=\"${quote.text}\" - ${quote.author}`}>\n          <i className=\"fa fa-twitter\"></i>\n                    </a>\n                </div>\n                  <div className=\"col-md-6 ml-md-auto text-right\">\n                    <button id=\"new-quote\" className=\"btn btn-primary\" onClick={handleClick}>New Quote</button>\n                </div>\n                </div>\n              </div>\n              <div>\n                <div id=\"quote-text\" className=\"text-center display-4\">\n                  <q id=\"text\">{quote.text}</q>\n                </div>\n                <div id=\"quote-author\" className=\"text-right\">\n                  <span id=\"author\">&mdash; {quote.author}</span>\n                </div>\n              </div>\n            </div>\n          </div>);\n}\n\nexport default QuoteBox\n","import React from 'react';\nimport QuoteBox from './components/QuoteBox.jsx'\n\nfunction App() {\n  return (\n    <div>\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}