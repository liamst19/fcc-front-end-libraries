{"version":3,"sources":["reducers/textReducer.js","store.js","services/markdown.js","components/Preview.jsx","components/Editor.jsx","App.js","index.js"],"names":["reducer","state","action","dispatcher","text","hasOwnProperty","type","combineReducers","textReducer","store","createStore","applyMiddleware","thunk","marked","setOptions","breaks","convertMarkdown","sanitize","style","border","padding","marginBottom","Preview","props","id","dangerouslySetInnerHTML","__html","Editor","className","value","rows","onChange","event","target","connect","initializeText","dispatch","updateText","useEffect","textValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAwBeA,EAvBC,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAChCC,EAAa,CACjB,KAAQ,kBAAMD,EAAOE,MACrB,OAAU,kBAAMF,EAAOE,OAEzB,OAAOD,EAAWE,eAAeH,EAAOI,MACtCH,EAAWD,EAAOI,QAAUL,GCF1BD,EAAUO,YAAgB,CAC9BH,KAAMI,IAKOC,EAFDC,YAAYV,EAASW,YAAgBC,M,iBCRnDC,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAIeC,EAJS,SAAAZ,GACtB,OAAOS,IAAOT,EAAM,CAACa,UAAU,KCF3BC,EAAQ,CACZC,OAAQ,iBACRC,QAAS,SACTC,aAAc,QAQDC,EALC,SAAAC,GACd,OAAQ,yBAAKC,GAAG,UAAUN,MAAOA,EAAOO,wBAAyB,CAAEC,OAAQV,EAAgBO,EAAMnB,UCEpFuB,EAXA,SAAAJ,GAMb,OAAQ,yBAAKK,UAAU,cACb,8BAAUJ,GAAG,SAASI,UAAU,yBAAyBC,MAAON,EAAMnB,KAAM0B,KAAK,KAAKC,SAL3E,SAAAC,GACnBT,EAAMQ,SAASC,EAAMC,OAAOJ,YCqCjBK,eACb,SAAAjC,GAAK,MAAK,CAAEG,KAAMH,EAAMG,QACxB,CAAE+B,eLlC0B,SAAA/B,GAAI,OAAK,SAAAgC,GACrC,OAAOA,EAAS,CACd9B,KAAM,OACNF,KAAMA,MK+BUiC,WL3BM,SAAAjC,GAAI,OAAI,SAAAgC,GAChC,OAAOA,EAAS,CACd9B,KAAM,SACNF,KAAMA,OKsBK8B,EAnBH,SAAC,GAA2C,IAAzC9B,EAAwC,EAAxCA,KAAM+B,EAAkC,EAAlCA,eAAgBE,EAAkB,EAAlBA,WAEnCC,qBAAU,WACRH,EAhBY,4nBAiBX,CAACA,IAMJ,OACE,yBAAKP,UAAU,iBACb,kDACA,kBAAC,EAAD,CAAQxB,KAAMA,EAAM2B,SAPH,SAAAQ,GACnBF,EAAWE,MAOT,kBAAC,EAAD,CAASnC,KAAMA,QC9BrBoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUjC,MAAOA,GACf,kBAAC,EAAD,QAGJkC,SAASC,eAAe,W","file":"static/js/main.b476c429.chunk.js","sourcesContent":["\nconst reducer = (state = '', action) => {\n  const dispatcher = {\n    'INIT': () => action.text,\n    'UPDATE': () => action.text\n  }\n  return dispatcher.hasOwnProperty(action.type) ?\n    dispatcher[action.type]() : state;\n}\n\nexport const initializeText = text =>  dispatch => {\n  return dispatch({\n    type: 'INIT',\n    text: text\n  });\n}\n\nexport const updateText = text => dispatch => {\n  return dispatch({\n    type: 'UPDATE',\n    text: text\n  })\n}\n\nexport default reducer\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport textReducer from './reducers/textReducer.js';\n\nconst reducer = combineReducers({\n  text: textReducer\n})\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store\n","import marked from 'marked'\nmarked.setOptions({\n  breaks: true\n});\n\nconst convertMarkdown = text => {\n  return marked(text, {sanitize: true});\n}\n\nexport default convertMarkdown\n","import React from 'react';\n\nimport convertMarkdown from '../services/markdown';\n\nconst style = {\n  border: \"1px solid #ddd\",\n  padding: \"0.5rem\",\n  marginBottom: \"3rem\"\n}\n\nconst Preview = props => {\n  return (<div id=\"preview\" style={style} dangerouslySetInnerHTML={{ __html: convertMarkdown(props.text) }}>\n         </div>);\n}\n\nexport default Preview;\n","import React from 'react';\n\nconst Editor = props => {\n\n  const handleChange = event => {\n    props.onChange(event.target.value);\n  }\n\n  return (<div className=\"form-group\">\n            <textarea id=\"editor\" className=\"form-control rounded-0\" value={props.text} rows=\"10\" onChange={ handleChange } />\n          </div>)\n}\n\nexport default Editor;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// Components\nimport Preview from './components/Preview';\nimport Editor from './components/Editor';\n\n// Reducers\nimport { initializeText, updateText } from './reducers/textReducer';\n\nconst SAMPLETEXT = `# Header 1\n## Header 2\n- [Link to Google](https://www.google.com/)\n- \\`inline code block\\`\n- ![image](myimage.jpg \"image\")\n- **bold text**\n- \\`\\`\\`\nBlock Code\n\\`\\`\\`\n- Blockquote\n> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n`\n\nconst App = ({ text, initializeText, updateText })  => {\n\n  useEffect(() => {\n    initializeText(SAMPLETEXT);\n  }, [initializeText]);\n\n  const handleChange = textValue => {\n    updateText(textValue);\n  }\n\n  return (\n    <div className=\"App container\">\n      <h1>Markdown Previewer</h1>\n      <Editor text={text} onChange={ handleChange } />\n      <Preview text={text} />\n    </div>\n  );\n}\n\nexport default connect(\n  state => ({ text: state.text }),\n  { initializeText, updateText }\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}